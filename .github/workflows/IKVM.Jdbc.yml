name: IKVM.Jdbc

on:
  push:
    branches:
    - main
    - hotfix/*
    - develop
    - release/*
  pull_request:
    branches:
    - main
    - develop

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Move Temporary Directory
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nTMP=${{ runner.temp }}`nTEMP=${{ runner.temp }}`nTMPDIR=${{ runner.temp }}"
    - name: Setup .NET
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=${{ runner.temp }}/dotnet"
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        useConfigFile: true
    - name: Move NuGet Directory
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nNUGET_PACKAGES=${{ runner.temp }}/nuget/packages"
    - name: Add NuGet Source (GitHub)
      shell: pwsh
      run: dotnet nuget add source --username USERNAME --password $env:GITHUB_TOKEN --store-password-in-clear-text --name ikvm $env:GITHUB_REPOS
      env:
        GITHUB_REPOS: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Cache NuGet
      uses: actions/cache@v3
      with:
        path: ${{ runner.temp }}/nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.msbuildproj') }}-1
        restore-keys: ${{ runner.os }}-nuget-
    - name: NuGet Restore
      run: dotnet restore IKVM.Jdbc.sln
    - name: Build
      run: |
        dotnet msbuild /m /bl `
          /p:Configuration="Release" `
          /p:Platform="Any CPU" `
          /p:Version=${env:GitVersion_FullSemVer} `
          /p:AssemblyVersion=${env:GitVersion_AssemblySemVer} `
          /p:InformationalVersion=${env:GitVersion_InformationalVersion} `
          /p:FileVersion=${env:GitVersion_AssemblySemFileVer} `
          /p:PackageVersion=${env:GitVersion_NuGetVersionV2} `
          /p:RepositoryUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}.git" `
          /p:PackageProjectUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}" `
          /p:BuildInParallel=true `
          /p:CreateHardLinksForAdditionalFilesIfPossible=true `
          /p:CreateHardLinksForCopyAdditionalFilesIfPossible=true `
          /p:CreateHardLinksForCopyFilesToOutputDirectoryIfPossible=true `
          /p:CreateHardLinksForCopyLocalIfPossible=true `
          /p:CreateHardLinksForPublishFilesIfPossible=true `
          /p:ContinuousIntegrationBuild=true `
          IKVM.Jdbc.dist.msbuildproj
    - name: Upload MSBuild Log
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: msbuild.binlog
        path: msbuild.binlog
    - name: Upload NuGet Packages
      uses: actions/upload-artifact@v3
      with:
        name: nuget
        path: dist/nuget
    - name: Package Tests
      run: tar czvf tests.tar.gz tests
      working-directory: dist
    - name: Upload Tests
      uses: actions/upload-artifact@v3
      with:
        name: tests
        path: dist/tests.tar.gz
  test:
    strategy:
      matrix:
        sys:
        - windows
        - linux
        tfm:
        - net48
        - netcoreapp3.1
        - net6.0
        - net7.0
        exclude:
        - tfm: net48
          sys: linux
    name: Test (${{ matrix.sys }}:${{ matrix.tfm }})
    needs:
    - build
    runs-on: ${{ fromJSON('{"windows":["windows-2022"],"linux":["ubuntu-22.04"]}')[matrix.sys] }}
    steps:
    - name: Set Paths (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $dir="C:\run"
        mkdir $dir
        mkdir $dir\temp
        mkdir $dir\dotnet
        mkdir $dir\nuget
        mkdir $dir\nuget\packages
        mkdir $dir\job
        Add-Content $env:GITHUB_ENV "`nJOBPATH=$dir\job"
        Add-Content $env:GITHUB_ENV "`nTMP=$dir\temp`nTEMP=$dir\temp`nTMPDIR=$dir\temp"
        Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=$dir\dotnet"
        Add-Content $env:GITHUB_ENV "`nNUGET_PACKAGES=$dir\nuget\packages"
    - name: Set Paths (Linux)
      if: runner.os == 'Linux'
      shell: pwsh
      run: |
        $dir="${{ runner.temp }}/run"
        mkdir $dir
        mkdir $dir/temp
        mkdir $dir/dotnet
        mkdir $dir/nuget
        mkdir $dir/nuget/packages
        mkdir $dir/job
        Add-Content $env:GITHUB_ENV "`nJOBPATH=$dir/job"
        Add-Content $env:GITHUB_ENV "`nTMP=$dir/temp`nTEMP=$dir/temp`nTMPDIR=$dir/temp"
        Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=$dir/dotnet"
        Add-Content $env:GITHUB_ENV "`nNUGET_PACKAGES=$dir/nuget/packages"
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Add NuGet Source (GitHub)
      shell: pwsh
      run: dotnet nuget add source --username USERNAME --password $env:GITHUB_TOKEN --store-password-in-clear-text --name ikvm $env:GITHUB_REPOS
      env:
        GITHUB_REPOS: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download Tests
      uses: actions/download-artifact@v3
      with:
        name: tests
        path: ${{ env.JOBPATH }}
    - name: Restore Tests
      run: tar xzvf tests.tar.gz
      working-directory: ${{ env.JOBPATH }}
    - name: Execute Tests
      timeout-minutes: 480
      shell: pwsh
      run: |
        $tfm = "${{ matrix.tfm }}"
        $sys = "${{ matrix.sys }}"
        $tests = $(gci ./tests/*/$tfm -Recurse -Filter '*.Tests.dll')
        if ($tests) {
            Add-Content $env:GITHUB_ENV "`nRET=TestResults--$tfm--$sys"
            dotnet test -f $tfm --blame -v 2 --results-directory "TestResults" --logger:"console;verbosity=detailed" --logger:trx --collect "Code Coverage" $tests
        }
      working-directory: ${{ env.JOBPATH }}
    - name: Upload Test Results
      if: always() && startsWith(env.RET, 'TestResults--')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.RET }}
        path: ${{ env.JOBPATH }}/TestResults
  release:
    name: Release
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs:
    - test
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      id: GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        useConfigFile: true
    - name: Download NuGet Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget
        path: dist/nuget
    - name: Create Release
      if: github.ref == 'refs/heads/main' || github.event.head_commit.message == '+push'
      uses: ncipollo/release-action@v1.11.2
      with:
        tag: ${{ steps.GitVersion.outputs.semVer }}
        artifacts: dist/nuget/*.nupkg,dist/nuget/*.snupkg
        draft: false
        generateReleaseNotes: true
        prerelease: ${{ github.ref == 'refs/heads/develop' }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Push NuGet (GitHub)
      shell: pwsh
      run: dotnet nuget push dist/nuget/*.nupkg --source $env:GITHUB_REPOS --api-key $env:GITHUB_TOKEN --skip-duplicate
      env:
        GITHUB_REPOS: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Push NuGet (Azure DevOps)
      shell: pwsh
      run: |
        dotnet nuget add source $env:AZUREDEVOPS_REPOS --name az --username az --password $env:AZUREDEVOPS_TOKEN --store-password-in-clear-text
        dotnet nuget push dist/nuget/*.nupkg --source az --api-key az --skip-duplicate
      env:
        AZUREDEVOPS_REPOS: https://pkgs.dev.azure.com/ikvm-revived/ikvm/_packaging/ikvm-ci/nuget/v3/index.json
        AZUREDEVOPS_TOKEN: ${{ secrets.AZUREDEVOPS_PAT }}
    - name: Push NuGet
      if: github.ref == 'refs/heads/main' || github.event.head_commit.message == '+push'
      shell: pwsh
      run: dotnet nuget push dist/nuget/*.nupkg --source $env:NUGET_REPOS --api-key $env:NUGET_TOKEN --skip-duplicate
      env:
        NUGET_REPOS: https://api.nuget.org/v3/index.json
        NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
